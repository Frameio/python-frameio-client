version: 2.1

orbs:
  python: circleci/python@0.2.1
  win: circleci/windows@2.2.0

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - gh-pages

      - test_integration:
          requires:
            - build
          filters:
            branches:
              ignore:
                - gh-pages
          matrix:
            parameters:
              python-version: ["3.6.5", "3.7.7", "3.8.6", "3.9.3", "3.9.9", "3.9.10", "latest"]

      - hold:
          type: approval
          requires:
            - test_integration
          filters:
            branches:
              only:
                - master
            tags:
              only: /[0-9]+(\.[0-9]+)*/

      - deploy:
          requires:
            - hold

jobs:
  build:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout:
          name: Checkout Git
      - run:
          name: Build Package
          command: |
            echo -e "Running sdist"
            python setup.py sdist
      - persist_to_workspace:
          root: /home/circleci/project/
          paths:
            - .

  test_integration:
    description: Python << parameters.python-version >>
    parameters:
      python-version:
        type: string
    docker:
      - image: circleci/python:<< parameters.python-version >>
    steps:
      - attach_workspace:
          at: /tmp/artifact
          name: Attach build artifact
      - run:
          name: Install package
          command: |
            pip install --user '/tmp/artifact'
      - run:
          name: Run integration test
          command: |
            python /tmp/artifact/tests/integration.py

  deploy:
    docker:
      - image: circleci/python:latest
    steps:
      - attach_workspace:
          at: /tmp/artifact
          name: Attach build artifact
      - run:
          name: Install dependencies
          command: |
            pip install setuptools wheel twine
      - run:
          name: init .pypirc
          command: |
            cd /tmp/artifact
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $TWINE_USERNAME" >> ~/.pypirc
            echo -e "password = $TWINE_PASSWORD" >> ~/.pypirc
      - run:
          name: Upload to pypi
          command: |
            cd /tmp/artifact
            twine upload dist/*
